plot(GTM)
suppressPackageStartupMessages(library(googleVis))
M <- gvisMotionChart(Fruits, "Fruit", "Year",
options=list(width=600, height=400))
#print(M,"chart")
plot(M)
knitr::opts_chunk$set(echo = TRUE)
library(googleVis)
#suppressPackageStartupMessages(library(googleVis))
M <- gvisMotionChart(Fruits, "Fruit", "Year",
options=list(width=600, height=400))
#print(M)
plot(M)
G <- gvisGeoChart(Exports, locationvar="Country", colorvar="Profit",options=list(width=600))
#print(G,"chart")
plot(G)
T1 <- gvisTable(Exports,options=list(width=200, height=270))
plot(T1)
G2 <- gvisGeoChart(Exports, locationvar="Country",
colorvar="Profit",options=list(width=600, height=400,region="150"))
#print(G2,"chart")
df <- data.frame(label=c("US", "GB", "BR"), val1=c(1,3,4), val2=c(23,12,32))
Line <- gvisLineChart(df, xvar="label", yvar=c("val1","val2"),
options=list(title="Hello World", legend="bottom",
titleTextStyle="{color:'red', fontSize:18}",
vAxis="{gridlines:{color:'red', count:3}}",
hAxis="{title:'My Label', titleTextStyle:{color:'blue'}}",
series="[{color:'green', targetAxisIndex: 0},
{color: 'blue',targetAxisIndex:1}]",
vAxes="[{title:'Value 1 (%)', format:'##,######%'},
{title:'Value 2 (\U00A3)'}]",
curveType="function", width=500, height=300
))
#print(Line,"chart")
plot(Line)
G <- gvisGeoChart(Exports, "Country", "Profit",options=list(width=200, height=100))
T1 <- gvisTable(Exports,options=list(width=200, height=270))
M <- gvisMotionChart(Fruits, "Fruit", "Year", options=list(width=400, height=370))
GT <- gvisMerge(G,T1, horizontal=FALSE)
GTM <- gvisMerge(GT, M, horizontal=TRUE,tableOptions="bgcolor=\"#CCCCCC\" cellspacing=10")
#print(GTM,"chart")
plot(GTM)
suppressPackageStartupMessages(library(googleVis))
M <- gvisMotionChart(Fruits, "Fruit", "Year",
options=list(width=600, height=400))
#print(M,"chart")
plot(M)
knitr::opts_chunk$set(echo = TRUE)
library(googleVis)
library(UsingR)
library(ggvis)
data("mtcars")
head(mtcars)
p <- ggvis(mtcars, x = ~wt, y = ~mpg)
layer_points(p)
layer_points(ggvis(mtcars, x = ~wt, y = ~mpg))
mtcars %>%
ggvis(x = ~wt, y = ~mpg) %>%
layer_points()
library(dplyr)
mtcars %>%
ggvis(x = ~mpg, y = ~disp) %>%
mutate(disp = disp / 61.0237) %>% # convert engine displacment to litres
layer_points()
mtcars %>% ggvis(~mpg, ~disp, stroke = ~vs) %>% layer_points()
mtcars %>% ggvis(~mpg, ~disp, fill = ~vs) %>% layer_points()
mtcars %>%
ggvis(~wt, ~mpg,
size := input_slider(10, 100),
opacity := input_slider(0, 1)
) %>%
layer_points()
knitr::opts_chunk$set(echo = TRUE)
library(googleVis)
library(UsingR)
library(ggvis)
data("mtcars")
head(mtcars)
p <- ggvis(mtcars, x = ~wt, y = ~mpg)
layer_points(p)
layer_points(ggvis(mtcars, x = ~wt, y = ~mpg))
mtcars %>%
ggvis(x = ~wt, y = ~mpg) %>%
layer_points()
library(dplyr)
mtcars %>%
ggvis(x = ~mpg, y = ~disp) %>%
mutate(disp = disp / 61.0237) %>% # convert engine displacment to litres
layer_points()
mtcars %>% ggvis(~mpg, ~disp, stroke = ~vs) %>% layer_points()
mtcars %>% ggvis(~mpg, ~disp, fill = ~vs) %>% layer_points()
mtcars %>%
ggvis(~wt, ~mpg,
size := input_slider(10, 100),
opacity := input_slider(0, 1)
) %>%
layer_points()
knitr::opts_chunk$set(echo = TRUE)
library(googleVis)
library(UsingR)
library(ggvis)
data("mtcars")
head(mtcars)
p <- ggvis(mtcars, x = ~wt, y = ~mpg)
layer_points(p)
layer_points(ggvis(mtcars, x = ~wt, y = ~mpg))
mtcars %>%
ggvis(x = ~wt, y = ~mpg) %>%
layer_points()
library(dplyr)
mtcars %>%
ggvis(x = ~mpg, y = ~disp) %>%
mutate(disp = disp / 61.0237) %>% # convert engine displacment to litres
layer_points()
mtcars %>% ggvis(~mpg, ~disp, stroke = ~vs) %>% layer_points()
mtcars %>% ggvis(~mpg, ~disp, fill = ~vs) %>% layer_points()
slider <- input_slider(10, 1000)
mtcars %>% ggvis(~wt, ~mpg) %>%
layer_points(size := slider) %>%
layer_points(fill := "red", opacity := 0.5, size := slider)
knitr::opts_chunk$set(echo = TRUE)
library(googleVis)
library(UsingR)
library(ggvis)
data("mtcars")
head(mtcars)
p <- ggvis(mtcars, x = ~wt, y = ~mpg)
layer_points(p)
layer_points(ggvis(mtcars, x = ~wt, y = ~mpg))
mtcars %>%
ggvis(x = ~wt, y = ~mpg) %>%
layer_points()
library(dplyr)
mtcars %>%
ggvis(x = ~mpg, y = ~disp) %>%
mutate(disp = disp / 61.0237) %>% # convert engine displacment to litres
layer_points()
mtcars %>% ggvis(~mpg, ~disp, stroke = ~vs) %>% layer_points()
mtcars %>% ggvis(~mpg, ~disp, fill = ~vs) %>% layer_points()
slider <- input_slider(10, 1000)
mtcars %>% ggvis(~wt, ~mpg) %>%
layer_points(size := slider) %>%
layer_points(fill := "red", opacity := 0.5, size := slider)
mtcars %>% ggvis(x = ~wt) %>%
layer_densities(
adjust = input_slider(.1, 2, value = 1, step = .1, label = "Bandwidth adjustment"),
kernel = input_select(
c("Gaussian" = "gaussian",
"Epanechnikov" = "epanechnikov",
"Rectangular" = "rectangular",
"Triangular" = "triangular",
"Biweight" = "biweight",
"Cosine" = "cosine",
"Optcosine" = "optcosine"),
label = "Kernel")
)
mtcars %>%
ggvis(~wt) %>%
layer_histograms(width =  input_slider(0, 2, step = 0.10, label = "width"),
center = input_slider(0, 2, step = 0.05, label = "center"))
mtcars %>%
ggvis(~wt, ~mpg) %>%
layer_smooths() %>%
layer_points()
mtcars %>% ggvis(~wt, ~mpg) %>%
layer_smooths(span = 1) %>%
layer_smooths(span = 0.3, stroke := "red")
mtcars %>% #call to data
ggvis(~wt, ~mpg) %>% #call to variables
layer_smooths(span = input_slider(0.5, 1, value = 1)) %>% #smoothing layer with input selection for   span
layer_points(size := input_slider(100, 1000, value = 100)) #point layer with input selection for size
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
library(plotly)
v <- plot_ly(mtcars, x = wt, y = mpg, mode = "markers",
color = as.factor(cyl), size = hp)
v <- plot_ly(mtcars, x = cyl, y = mpg, mode = "markers",
color = as.factor(cyl), size = hp)
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
library(plotly)
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
library(plotly)
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
library(plotly)
summary(mtcars)
knitr::opts_chunk$set(echo = TRUE)
data("mtcars")
summary(mtcars)
library(plotly)
data("mtcars")
summary(mtcars)
library(plotly)
v <- plot_ly(mtcars, x = wt, y = mpg, mode = "markers", color = disp)
data("mtcars")
v <- plot_ly(mtcars, x = wt, y = mpg, mode = "markers", color = disp)
v <- plot_ly(data=mtcars, x = wt, y = mpg, mode = "markers", color = disp)
v <- plot_ly(mtcars, x = cyl, y = mpg, mode = "markers", color = disp)
v <- plot_ly(mtcars, x = mtcars$cyl, y = mtcars$mpg, mode = "markers", color = disp)
library(plotly)
v <- plot_ly(mtcars, x = mtcars$cyl, y = mtcars$mpg, mode = "markers", color = disp)
v <- plot_ly(mtcars, x = mtcars$cyl, y = mtcars$mpg)
plot(v)
data("mtcars")
summary(mtcars)
library(plotly)
data("mtcars")
summary(mtcars)
library(plotly)
library(ggplot2)
data("mtcars")
summary(mtcars)
library(plotly)
library(ggplot2)
vic <- plot_ly(x = mtcars$wt, y = mtcars$mpg, mode = "markers")
data("mtcars")
summary(mtcars)
library(plotly)
library(ggplot2)
vic <- plot_ly(x = mtcars$cyl, y = mtcars$mpg, mode = "markers")
data("mtcars")
summary(mtcars)
library(plotly)
library(ggplot2)
p <- plot_ly(x = mtcars$wt, y = mtcars$mpg, mode = "markers")
p
data("mtcars")
summary(mtcars)
library(plotly)
library(ggplot2)
data("mtcars")
summary(mtcars)
library(plotly)
library(ggplot2)
p <- plot_ly(mtcars, x = ~wt, y = ~mpg, mode = "markers")
p
install.packages("leaflet")
library(leaflet)
wkdir()
pwd
wkd()
getwd()
install.packages("sf")
library(sf)
installed.packages("mapview")
install.packages("ggmap")
install.packages("ggmap")
?register_google
install.packages("tmaptools")
install.packages("maps")
install.packages("mapdata")
install.packages(c("dygraphs", "FedData", "rgdal", "rgeos", "tigris"))
install.packages("tmap")
data(Michelson)
data(MichelsonSets)
data("Michelson")
data("MichelsonSet")
data("morley")
?morley
?sunspots
```{r, echo=FALSE, comments=""}
library(plotly)
#library(ggplot2)
#library(MASS)
```
library(plotly)
data("Theoph")
head(Theoph)
names(Theoph)
summary(Theoph)
?Theoph
data("economics")
head(economics)
names(economics)
data("OrchardSprays")
names(OrchardSprays)
head(OrchardSprays)
?OrchardSprays
library(MASS)
data("shuttle")
head(shuttle)
names(shuttle)
str(shuttle)
summary(shuttle)
?shuttle
data("wind")
head(wind)
names(wind)
?windows
install.packages("manipulate")
install.packages("devtools")
install_github('slidify', 'ramnathv')
install.packages("rtools")
install_github("slidify", "ramnathv")
install.packages("devtools")
library(devtools)
install_github("slidify", "ramnathv")
install_github('slidify', 'ramnathv')
install_github("slidify")
install_github("ramnathv")
install_github('slidify', 'ramnathv')
library(devtools)
install_github('slidify', 'ramnathv')
library(slidify)
install.packages("slidify")
githubinstall('slidify', 'ramnathv')
library(githubinstall)
install.packages("githubinstall")
githubinstall('slidify', 'ramnathv')
library(githubinstall)
githubinstall('slidify', 'ramnathv')
githubinstall('slidify', 'ramnathv')
githubinstall('slidify', 'ramnathv')
gh_install_packages('slidify', 'ramnathv')
install_github('slidifyLibraries', 'ramnathv')
install_github('slidify', 'ramnathv')
y <- data.frame(a = 1, b = "a")
y
x <- c("a", "b", "c", "c", "d", "a")
x[1:4]
x[1,4]
x[1 ,4]
x[1;4]
x[,4]
x[ ,4]
x[1,2]
x[c[1, 2]]
x[c(1, 2)]
x[c(1, 4)]
x <- matrix(1:6, 2, 3)
for(i in seq_len(nrow(x))) {
for(j in seq_len(ncol(x))) {
} }
x
x
x <- matrix(1:90, 2, 10)
for(i in seq_len(nrow(x))) {
for(j in seq_len(ncol(x))) {
} }
x
x
if(x>3){ y<-10
}else{ y<-0
}
x =4
x
if(x>3){ y<-10
}else{ y<-0
}
y
if(x>20){ y<-10
}else{ y<-0
}
y
x0<-1
tol <- 1e-8
repeat {
x1 <- computeEstimate()
if(abs(x1 - x0) < tol) { break
}else{ x0<-x1
} }
install.packages("faraway")
library(swirl)
swirl()
head(urban)
urban <- read_csv(datafile, col_types = "cccdc")
urban <- read_csv(datafile, col_types = "cccd-")
head(urban)
urban <- read_csv(datafile, col_types = "cccd-", n_max = 100)
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants)
head(plants, 10)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
install.packages("pryr")
library(magrittr)
library(swirl)
swirl()
1
1
0
swirl()
x <- is.character("Hello World!")
x <- "Hello World!"
x
paste("Square" "Circle" "Triangle" )
paste("Square",  "Circle",  "Triangle" )
paste("Square",  "Circle",  "Triangle" , sep = "+")
paste0("Square", "Circle", "Triangle")
shapes <- c("Square", "Circle", "Triangle")
paste("My favorite shape is a", shapes)
paste(shapes, collapse = " ")
nchar("Count Me!")
classes <- c("CAPS" , "low" , "Title")
cases <- c("CAPS", "low", "Title")
toupper(cases)
tolower(cases)
regular_expression <- "a"
string_to_search <- "Maryland"
grepl(regular_expression, string_to_search)
grepl("ryla", "Maryland")
grepl("Marly", "Maryland")
head(state.name)
knitr::opts_chunk$set(echo = TRUE)
grepl(".", "Maryland")
grepl(".","")
grepl("a.b", c("aaa", "aab", "abb", "acadb"))
grepl("a+", "Maryland")
grepl("x+", "Maryland")
grepl("x*", "Maryland")
grepl("s{2}", "Mississippi")
grepl("(i.{2}){3}", "Mississippi")
grepl("i{2,3}", "Mississippi")
grepl("(iss){2}", "Mississippi")
grepl("\\d", "0123456789")
grepl("\\D", "0123456789")
grepl("[aeiou]", "rhythms")
grepl("\\.", "http://www.jhsph.edu/")
grepl("^a", c("bab", "aab"))
grepl("b$", c("bab", "aab"))
grepl("a|b", c("abc", "bcd", "cde"))
start_end_vowel <- "^[AEIOU]{1}.+[aeiou]{1}$"
vowel_state_lgl <- grepl(start_end_vowel, state.name)
state.name[vowel_state_lgl]
grepl("[Ii]", c("Hawaii", "Illinois", "Kentucky"))
grep("[Ii]", c("Hawaii", "Illinois", "Kentucky"))
sub("[Ii]", "1", c("Hawaii", "Illinois", "Kentucky"))
gsub("[Ii]", "1", c("Hawaii", "Illinois", "Kentucky"))
two_s <- state.name[grep("ss", state.name)]
two_s
strsplit(two_s, "ss")
str_extract("Camaro Z28", "[0-9]+")
str_order(c("p", "e", "n", "g"))
str_pad("Thai", width = 8, side = "left", pad = "-")
str_to_title(c("CAPS", "low", "Title"))
str_trim(" trim me ")
word("See Spot run.", 2)
setwd("~/Desktop/CourseraLearning/JohnsHopkinsMasteringSoftwareDevelopmentR/BuildingRpackages/FinalAssignment/BuildingRpackage/FirstRpackage")
test_check("FirstRpackage")
library(devtools)
test_check("FirstRpackage")
source('~/Desktop/CourseraLearning/JohnsHopkinsMasteringSoftwareDevelopmentR/BuildingRpackages/FinalAssignment/BuildingRpackage/FirstRpackage/tests/testthat.R', echo=TRUE)
getwd()
source('~/Desktop/CourseraLearning/JohnsHopkinsMasteringSoftwareDevelopmentR/BuildingRpackages/FinalAssignment/BuildingRpackage/FirstRpackage/R/fars_functions.R', echo=TRUE)
source('~/Desktop/CourseraLearning/JohnsHopkinsMasteringSoftwareDevelopmentR/BuildingRpackages/FinalAssignment/BuildingRpackage/FirstRpackage/R/fars_functions.R', echo=TRUE)
#'
#' @return a data.frame of summarised data which is converted to a wide format
#'
#' @examples
#' \dontrun{
#'   fars_summarize_years(c(2013, 2014))
#' }
#'
#'
#' @export
fars_summarize_years <- function(years) {
#  Pass the years to fars_read_years to read in a vector of data
dat_list <- fars_read_years(years)
# Bind all the rows together
dplyr::bind_rows(dat_list) %>%
# Group by the year and Month variable
## Updated change from NSE to SE
dplyr::group_by_('year', 'MONTH') %>%
# Summarise the data and add a count column called n
## Updated change from NSE to SE
dplyr::summarize_(n = ~n()) %>%
# Spread the data from long to wide format
tidyr::spread_('year', 'n')
}
source('~/Desktop/CourseraLearning/JohnsHopkinsMasteringSoftwareDevelopmentR/BuildingRpackages/FinalAssignment/BuildingRpackage/FirstRpackage/R/fars_functions.R', echo=TRUE)
